{"version":3,"sources":["CKEditor.es6"],"names":[],"mappings":"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","file":"CKEditor.js","sourcesContent":["// Imports\nimport {\n    Component,\n    Directive,\n    Input,\n    Output,\n    ElementRef,\n    ViewChild,\n    Optional,\n    OptionalMetadata,\n    EventEmitter,\n    Renderer\n} from '@angular/core';\nimport {NgControl, ControlValueAccessor} from '@angular/common';\n\n/**\n * CKEditor component\n * Usage :\n * <ckeditor [(ngModel)]=\"data\" [config]=\"{...}\" configFile=\"file.js\"></ckeditor>\n */\n@Component({\n    selector: 'ckeditor',\n    template: `<textarea #host (change)=\"onValueChange($event)\"></textarea>`,\n})\n@Reflect.metadata('parameters', [null, [new OptionalMetadata()]])\nexport class CKEditor {\n\n    @Input() config;\n    @Input() configFile;\n    @Input() ngModel;\n\n    @Output() change = new EventEmitter();\n    @ViewChild('host') host;\n\n    value = '';\n    instance;\n    ngControl;\n    renderer;\n\n    /**\n     * Constructor\n     */\n    constructor(elementRef:ElementRef, ngControl:NgControl, renderer:Renderer){\n        if( ngControl ){\n            ngControl.valueAccessor = this;\n            this.ngControl = ngControl;\n        }\n        this.renderer = renderer;\n    }\n\n    /**\n     * On component destroy\n     */\n    ngOnDestroy(){\n        if( this.instance ) {\n            this.instance.removeAllListeners();\n            this.instance.destroy();\n            this.instance = null;\n        }\n    }\n\n    /**\n     * On component view init\n     */\n    ngAfterViewInit(){\n        // Configuration\n        var config = {};\n\n        // Fetch file\n        if( this.configFile ){\n\n            if( System && System.import ){\n                System.import(this.configFile)\n                    .then((res) => {\n                        this.ckeditorInit( res.config );\n                    })\n            }\n\n        // Config object\n        }else{\n            config = this.config || {};\n            this.ckeditorInit( config );\n        }\n    }\n\n    /**\n     * Detect textarea value change\n     */\n    onValueChange(event){\n        var value = this.host.nativeElement.value;\n        this.change.emit( value );\n        this.ngControl.viewToModelUpdate( value );\n    }\n\n    /**\n     * CKEditor init\n     */\n    ckeditorInit( config ){\n\n        if(!CKEDITOR){\n            console.error('Please include CKEditor in your page');\n            return;\n        }\n\n        // CKEditor replace textarea\n        this.instance = CKEDITOR.replace( this.host.nativeElement, config );\n\n        // Set initial value\n        this.instance.setData(this.value);\n\n        // CKEditor change event\n        this.instance.on('change', () => {\n            this.renderer.setElementProperty(this.host.nativeElement, 'value', this.instance.getData());\n            this.renderer.invokeElementMethod(this.host.nativeElement, 'dispatchEvent', [new Event('change')]);\n        });\n    }\n\n    /**\n     * Implements ControlValueAccessor\n     */\n    writeValue(value){\n        this.value = value;\n        if( this.instance )\n            this.instance.setData(value);\n    }\n    onChange(_){}\n    onTouched(){}\n    registerOnChange(fn){this.onChange = fn;}\n    registerOnTouched(fn){this.onTouched = fn;}\n}\n\n/**\n * CKEditor inline Directive\n * @WIP\n */\n// @Directive({\n//     selector: '[ckeditorInline]',\n// })\n// export class CKEditorInline{\n//\n//     @Input('ckeditorInline') config;\n//\n//     instance;\n//     el;\n//\n//     /**\n//      * Constructor\n//      */\n//     constructor(el: ElementRef) {\n//         this.el = el;\n//     }\n//\n//     /**\n//      * On component view init\n//      */\n//     ngAfterViewInit(){\n//         var config = this.config || {};\n//         //this.ckeditorInit( config );\n//     }\n//\n//     /**\n//      * On component destroy\n//      */\n//     ngOnDestroy(){\n//         if( this.instance ) {\n//             this.instance.removeAllListeners();\n//             this.instance.destroy();\n//             this.instance = null;\n//         }\n//     }\n//\n//     /**\n//      * CKEditor init\n//      */\n//     ckeditorInit( config ){\n//         if(!CKEDITOR){\n//             console.error('Please include CKEditor in your page');\n//             return;\n//         }\n//\n//         CKEDITOR.disableAutoInline = true;\n//         this.instance = CKEDITOR.inline(this.el);\n//     }\n//\n// }\n"]}